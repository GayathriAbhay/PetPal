// This is your complete Prisma schema file,
// tailored for NextAuth.js and MySQL (TiDB) compatibility.

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["driverAdapters"] // Enable this line when deploying to Vercel/Netlify with the TiDB adapter
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- NextAuth Models ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  
  // Use @db.Text for MySQL compatibility with potentially long tokens/secrets
  refresh_token     String? @db.Text @map("refresh_token")
  access_token      String? @db.Text @map("access_token")
  
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @db.Text @map("id_token")
  session_state     String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   // <--- CRUCIAL: Added for Credentials Provider (stores bcrypt hash)
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@map("verification_tokens")
  @@unique([identifier, token])
}

// --- Application Models ---

model Pet {
  id            String          @id @default(cuid())
  name          String
  species       String          // e.g., Dog, Cat
  breed         String?
  age           Int?
  sex           String?
  neutered      Boolean?        @default(false)
  microchip     String?
  color         String?
  weightKg      Float?
  bio           String?         @db.Text
  createdAt     DateTime        @default(now())
  medicalRecords MedicalRecord[]

  @@map("pets")
}

model MedicalRecord {
  id          String   @id @default(cuid())
  petId       String
  pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  description String?  @db.Text
  diagnosis   String?
  treatment   String?  @db.Text
  vetName     String?
  notes       String?  @db.Text
  createdAt   DateTime @default(now())

  @@map("medical_records")
}
